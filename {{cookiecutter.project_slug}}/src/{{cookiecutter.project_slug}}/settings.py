"""
Django settings for {{cookiecutter.project_slug}} project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

import decouple
from decouple import config as decouple_config

from django.utils.translation import gettext_lazy as _


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = decouple_config("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = decouple_config("DJANGO_DEBUG", default=False, cast=bool)

ALLOWED_HOSTS = decouple_config("DJANGO_ALLOWED_HOSTS", cast=decouple.Csv())

APP_DOMAIN = decouple.config("APP_DOMAIN")

CSRF_TRUSTED_ORIGINS = decouple_config("DJANGO_CSRF_TRUSTED_ORIGINS", cast=decouple.Csv())

# Application definition
# ------------------------------------------------------------------------------
DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.forms",
]

THIRD_PARTY_APPS = [
    "django_extensions",
    "widget_tweaks",
    {%- if cookiecutter.use_django_recaptcha == "y" %}
    "django_recaptcha",
    {%- endif %}
    {%- if cookiecutter.use_restframework == "y" %}
    "rest_framework",
    "corsheaders",
    "drf_spectacular",
    {%- endif %}
]

LOCAL_APPS = [
    "apps.core",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

# Middlewares
# ------------------------------------------------------------------------------
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    {%- if cookiecutter.use_restframework == "y" %}
    "corsheaders.middleware.CorsMiddleware",
    {%- endif %}
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
# ------------------------------------------------------------------------------

ROOT_URLCONF = "{{cookiecutter.project_slug}}.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

FORM_RENDERER = "django.forms.renderers.TemplatesSetting"


WSGI_APPLICATION = "{{cookiecutter.project_slug}}.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "HOST": decouple_config("POSTGRES_DB_HOST"),
        "PORT": decouple_config("POSTGRES_DB_PORT"),
        "NAME": decouple_config("POSTGRES_DB_NAME"),
        "USER": decouple_config("POSTGRES_DB_USER"),
        "PASSWORD": decouple_config("POSTGRES_DB_PASSWORD"),
    }
}


# Password validation settings
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

#TODO:
#AUTH_USER_MODEL = "users.User"


# Internationalization settings
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "es-MX"
TIME_ZONE = "{{cookiecutter.timezone}}"
USE_I18N = True
USE_TZ = True
DATE_FORMAT = "d-m-Y"
LANGUAGES = [
    ("en", _("English")),
    ("es-MX", _("Spanish")),
]

LOCALE_PATHS = [
    BASE_DIR / "locale/",
]


# Static Settings
# ------------------------------------------------------------------------------
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_URL = decouple_config("DJANGO_STATIC_URL", default="static/")
# https://docs.djangoproject.com/en/5.0/ref/settings/#static-root
STATIC_ROOT = "staticfiles/"

STATICFILES_DIRS = [
    BASE_DIR / "static",
]


# Default primary key field type
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Admin Settings
# ------------------------------------------------------------------------------
# Django Admin URL.
ADMIN_URL = "{{cookiecutter.project_slug}}admin/"


# Login settings
# ------------------------------------------------------------------------------
# Django Admin URL.
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"
# TODO:
#LOGIN_URL = "accounts:login"


{% if cookiecutter.use_aws_media_files == "y" %}
# AWS Settings
# ------------------------------------------------------------------------------
AWS_ACCESS_KEY_ID = decouple.config("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = decouple.config("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = decouple.config("AWS_STORAGE_BUCKET_NAME")
AWS_DEFAULT_ACL = "public-read"
AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}

# s3 public media settings
# ------------------------------------------------------------------------------
STORAGES = {
    "default": {"BACKEND": "apps.core.storage_backends.S3PublicStorage"},
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}
PUBLIC_MEDIA_LOCATION = "media"


# Media Settings
# ------------------------------------------------------------------------------
MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/"
{% else %}
# Media Settings
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/5.0/ref/settings/#media-root
MEDIA_ROOT = "media"
# https://docs.djangoproject.com/en/5.0/ref/settings/#media-url
MEDIA_URL = "/media/"
{%- endif %}



# Jupyter notebook settings
# ------------------------------------------------------------------------------
NOTEBOOK_ARGUMENTS = [
    "--allow-root",
    "--no-browser",
    "--ip",
    "0.0.0.0",
    "--port",
    "8001",
    "--NotebookApp.token",
    "",
    "--NotebookApp.password",
    "",
]
IPYTHON_KERNEL_DISPLAY_NAME = "Django Kernel"


{% if cookiecutter.use_redis == "y" %}
# Cache Settings
# ------------------------------------------------------------------------------
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": decouple_config("REDIS_CACHE_URL"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "IGNORE_EXCEPTIONS": True,
            "SOCKET_CONNECT_TIMEOUT": 0.5,
            "SOCKET_TIMEOUT": 1,
            "PICKLE_VERSION": 4,
            "CONNECTION_POOL_KWARGS": {"max_connections": 1},
            #"COMPRESSOR": "apps.cached.compressors.Lz4Compressor",
        }
    }
}
{%- endif %}


# Email Settings
# ------------------------------------------------------------------------------
EMAIL_HOST = decouple_config("DJANGO_EMAIL_HOST", default="localhost")
EMAIL_PORT = decouple_config("DJANGO_EMAIL_PORT", default=25, cast=int)
EMAIL_HOST_PASSWORD = decouple_config("DJANGO_EMAIL_HOST_PASSWORD", default="")
EMAIL_HOST_USER = decouple_config("DJANGO_EMAIL_HOST_USER", default="")
EMAIL_USE_TLS = decouple_config("DJANGO_EMAIL_USE_TLS", default=False, cast=bool)
EMAIL_USE_SSL = decouple_config("DJANGO_EMAIL_USE_SSL", default=False, cast=bool)
EMAIL_SUBJECT_PREFIX = decouple_config("DJANGO_EMAIL_SUBJECT_PREFIX", default="")
DEFAULT_FROM_EMAIL = decouple.config(
    "DJANGO_DEFAULT_FROM_EMAIL", default="no-reply@admin.mx"
)

{% if cookiecutter.use_django_recaptcha == "y" %}
# Recaptcha settings
# ------------------------------------------------------------------------------
RECAPTCHA_PUBLIC_KEY = decouple_config("RECAPTCHA_PUBLIC_KEY")
RECAPTCHA_PRIVATE_KEY = decouple_config("RECAPTCHA_PRIVATE_KEY")
RECAPTCHA_DOMAIN = decouple_config("RECAPTCHA_DOMAIN")
{%- endif %}

{% if cookiecutter.use_restframework == "y" %}
# Restframework CORS settings
# ------------------------------------------------------------------------------
CORS_ALLOWED_ORIGINS = [
    "http://localhost:{{ cookiecutter.nginx_running_port }}",
    "http://127.0.0.1:{{ cookiecutter.nginx_running_port }}",
    "http://localhost:{{ cookiecutter.django_running_port }}",
    "http://127.0.0.1:{{ cookiecutter.django_running_port }}",
]
{%- endif %}


def show_toolbar_callback():
    return DEBUG is True

# DEBUG settings
# ------------------------------------------------------------------------------
if DEBUG:
    {% if cookiecutter.use_django_recaptcha == "y" %}
    # Debug Recaptcha settings
    SILENCED_SYSTEM_CHECKS = ['django_recaptcha.recaptcha_test_key_error']
    # ------------------------------------------------------------------------------
    {%- endif %}

    # Debug Toolbar Settings
    import socket  # only if you haven't already imported this

    # ------------------------------------------------------------------------------
    DEBUG_TOOLBAR_CONFIG = {
        "SHOW_TOOLBAR_CALLBACK": lambda x: DEBUG is True

    }
    INSTALLED_APPS.append("debug_toolbar")
    MIDDLEWARE = ["debug_toolbar.middleware.DebugToolbarMiddleware"] + MIDDLEWARE
# ------------------------------------------------------------------------------
